{{- if .Values.ingress.enabled }}
{{- if not .Values.ingress.secretName }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ default "pomerium-tls" .Values.ingress.secret.name }}
  labels:
    app.kubernetes.io/name: {{ template "pomerium.name" . }}
    helm.sh/chart: {{ template "pomerium.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .Values.ingress.secret.cert }}
  tls.key: {{ .Values.ingress.secret.key }}
---
{{- end }}
{{- end }}

{{- define "pomerium.authenticate.tlsSecretObject" -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: {{ template "pomerium.name" . }}
    helm.sh/chart: {{ template "pomerium.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
{{- if .Values.config.forceGenerateTLS }}
    helm.sh/hook: pre-upgrade
{{- else if .Values.config.generateTLS }}
    helm.sh/hook: pre-install
{{- end }}
  name: {{ template "pomerium.authenticate.tlsSecret.name" . }}
type: kubernetes.io/tls
data:
{{- end -}}

{{- define "pomerium.authorize.tlsSecretObject" -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: {{ template "pomerium.name" . }}
    helm.sh/chart: {{ template "pomerium.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
{{- if .Values.config.forceGenerateTLS }}
    helm.sh/hook: pre-upgrade
{{- else if .Values.config.generateTLS }}
    helm.sh/hook: pre-install
{{- end }}
  name: {{ template "pomerium.authorize.tlsSecret.name" . }}
type: kubernetes.io/tls
data:
{{- end -}}

{{- define "pomerium.cache.tlsSecretObject" -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: {{ template "pomerium.name" . }}
    helm.sh/chart: {{ template "pomerium.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
{{- if .Values.config.forceGenerateTLS }}
    helm.sh/hook: pre-upgrade
{{- else if .Values.config.generateTLS }}
    helm.sh/hook: pre-install
{{- end }}
  name: {{ template "pomerium.cache.tlsSecret.name" . }}
type: kubernetes.io/tls
data:
{{- end -}}

{{- define "pomerium.proxy.tlsSecretObject" -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: {{ template "pomerium.name" . }}
    helm.sh/chart: {{ template "pomerium.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
{{- if .Values.config.forceGenerateTLS }}
    helm.sh/hook: pre-upgrade
{{- else if .Values.config.generateTLS }}
    helm.sh/hook: pre-install
{{- end }}
  name: {{ template "pomerium.proxy.tlsSecret.name" . }}
type: kubernetes.io/tls
data:
{{- end -}}

{{- define "pomerium.ca.tlsSecretObject" -}}
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/name: {{ template "pomerium.name" . }}
    helm.sh/chart: {{ template "pomerium.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  annotations:
    helm.sh/hook-delete-policy: before-hook-creation
{{- if .Values.config.forceGenerateTLS }}
    helm.sh/hook: pre-upgrade
{{- else if .Values.config.generateTLS }}
    helm.sh/hook: pre-install
{{- end }}
  name: {{ template "pomerium.caSecret.name" . }}
type: Opaque
data:
{{- end -}}


{{- if and .Values.config.generateTLS (or .Release.IsInstall .Values.config.forceGenerateTLS) }}
{{- $ca := genCA "default-ca" 3650 }}
{{- $authenticateSN:= list (printf "authenticate.%s" .Values.config.rootDomain) (printf "%s.%s.svc.cluster.local" (include "pomerium.authenticate.fullname" .) .Release.Namespace )}}
{{- $authorizeSN:= list (printf "authorize.%s" .Values.config.rootDomain) (printf "%s.%s.svc.cluster.local" (include "pomerium.authorize.fullname" .) .Release.Namespace )}}
{{- $cacheSN:= list (printf "cache.%s" .Values.config.rootDomain) (printf "%s.%s.svc.cluster.local" (include "pomerium.cache.fullname" .) .Release.Namespace )}}

{{- $cn := default "example.com" .Values.config.rootDomain }}
{{ template "pomerium.ca.tlsSecretObject" . }}
  ca.crt: {{ $ca.Cert | b64enc }}
  ca.key: {{ $ca.Key | b64enc }}
---
{{- $kp := genSignedCert $cn ( default nil .Values.authenticate.tls.defaultIPList ) ( default $authenticateSN .Values.authenticate.tls.defaultSANList ) 3650 $ca }}
{{ template "pomerium.authenticate.tlsSecretObject" . }}
  tls.crt: {{ $kp.Cert | b64enc }}
  tls.key: {{ $kp.Key | b64enc }}
---
{{- $kp := genSignedCert $cn ( default nil .Values.authorize.tls.defaultIPList ) ( default $authorizeSN .Values.authorize.tls.defaultSANList ) 3650 $ca }}
{{ template "pomerium.authorize.tlsSecretObject" . }}
  tls.crt: {{ $kp.Cert | b64enc }}
  tls.key: {{ $kp.Key | b64enc }}
---
{{- $kp := genSignedCert $cn ( default nil .Values.cache.tls.defaultIPList ) ( default $cacheSN .Values.cache.tls.defaultSANList ) 3650 $ca }}
{{ template "pomerium.cache.tlsSecretObject" . }}
  tls.crt: {{ $kp.Cert | b64enc }}
  tls.key: {{ $kp.Key | b64enc }}
---
{{- $kp := genSignedCert $cn ( default nil .Values.proxy.tls.defaultIPList ) ( default nil .Values.proxy.tls.defaultSANList ) 3650 $ca }}
{{ template "pomerium.proxy.tlsSecretObject" . }}
  tls.crt: {{ $kp.Cert | b64enc }}
  tls.key: {{ $kp.Key | b64enc }}
{{-   else if not .Values.config.generateTLS }}
{{-     if and (not .Values.config.existingCASecret) .Values.config.ca.cert .Values.config.ca.key }}
{{ template "pomerium.ca.tlsSecretObject" . }}
  ca.crt: {{ .Values.config.ca.cert | b64enc }}
  ca.key: {{ .Values.config.ca.key | b64enc }}
{{-     end }}
{{-     if and (not .Values.authenticate.existingTLSSecret) .Values.authenticate.tls.cert .Values.authenticate.tls.key }}
---
{{ template "pomerium.authenticate.tlsSecretObject" . }}
  tls.crt: {{ .Values.authenticate.tls.cert | b64enc }}
  tls.key: {{ .Values.authenticate.tls.key | b64enc }}
{{-     end }}
{{-     if and (not .Values.authorize.existingTLSSecret) .Values.authorize.tls.cert .Values.authorize.tls.key }}
---
{{ template "pomerium.authorize.tlsSecretObject" . }}
  tls.crt: {{ .Values.authorize.tls.cert | b64enc }}
  tls.key: {{ .Values.authorize.tls.key | b64enc }}
{{-     end }}
{{-     if and (not .Values.cache.existingTLSSecret) .Values.cache.tls.cert .Values.cache.tls.key }}
---
{{ template "pomerium.cache.tlsSecretObject" . }}
  tls.crt: {{ .Values.cache.tls.cert | b64enc }}
  tls.key: {{ .Values.cache.tls.key | b64enc }}
{{-     end }}
{{-     if and (not .Values.proxy.existingTLSSecret) .Values.proxy.tls.cert .Values.proxy.tls.key }}
---
{{ template "pomerium.proxy.tlsSecretObject" . }}
  tls.crt: {{ .Values.proxy.tls.cert | b64enc }}
  tls.key: {{ .Values.proxy.tls.key | b64enc }}
{{-     end }}
{{- end }}